(* types *)

id_type = id ':' typ

ids_type = id {',' id}+ typ

(* terms *)

term = sym | id '(' expr ')' | var | '(' expr ')'

terms = term+

(* expressions *)

op = '·' | '+' | '=' | '≠'

expr = terms | expr op expr

atomic = expr ['is true']

(* small propositions *)

prop_op 'and' | 'or' | 'implies' | ', and' | ', or'

small_prop = atomic | small_prop prop_op small_prop | small_prop 'for all' id_type

(* propositions *)

if_then_prop = 'if' small_prop 'then' small_prop

either_or_prop = 'either' small_prop

for_all_prop = 'For all' ids_type ',' proposition

exists_prop =
    'There is' ('some' | 'none') id_type 'such that' proposition

proposition =
    for_all_prop | exists_prop | if_then_prop | either_or_prop |
    small_prop

(* top propositions *)

let_prop = 'Let' id_type '.' top_prop

suppose = 'Suppose that' proposition {', and that' proposition} '.'
    'Then' proposition

top_prop = let_prop | suppose | proposition

(* proposition lists *)

label = (letter | number) '.'

proposition_item = label top_prop '.' ['(' word ')']

prop_items = proposition_item+

top_prop_or_items = prop_items | top_prop '.'

propositions = ['for all' ids_type ','] top_prop_or_items

(* axioms *)

axiom_decl = 'a type' id |
    (('an element' | 'a function' | 'a binary operation') id_or_sym ':' typ)

axiom_group = 'Axiom.'
    ('There exists' | 'There is') axiom_decl {('and' | 'with') axiom_decl}
    'such that' propositions

(* definitions *)

definition = 'Definition. Let' sym ':' typ '=' term '.'

(* proofs *)

so = 'hence' | 'so' | 'then' | 'therefore'
    
have = 'it follows that' | 'we have' | 'we must have'

reason = 'by'
    ('lemma' number |
     'part (' number ')' ['of this theorem'] |
     'the inductive hypothesis')

contra = ',' 'which is a contradiction'

proof_intro_prop =
    'if' small_prop [','] 'then' proof_prop |
    reason [','] [have] proposition [contra]

proof_prop = proof_intro_prop | proposition [reason] [contra]

assert_step =
    proof_intro_prop | (so | have) proof_prop | 'Since' proof_prop ',' have proof_prop

assert_steps = assert_step {"," so proof_prop}

_let = ['Now'] 'let'

let_step = _let ids_type ['with' small_prop]

let_val_step = _let id_type '=' term

assume_step = 'Suppose that' proposition

let_or_assume = let_val_step | let_step | assume_step

let_or_assumes = let_or_assume {", and" let_or_assume}

by_step = ['For any' var [',']] ['we' ['will']] 'use' word 'on' var

proof_sentence = (let_or_assumes | assert_steps | by_step) '.'

proof_item = label proof_sentence+

proofs = 'Proof.' proof_item+

(* theorems *)

theorem_group = ('Lemma.' | 'Theorem.') 'Let' ids_type '.'
    top_prop_or_items [proofs]

(* program *)

program = {axiom_group | definition | theorem_group}
